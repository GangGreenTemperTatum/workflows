{
  "description": "## Workflow Description\n\nThis workflow enhances your security testing in Caido by leveraging AI to analyze HTTP requests for potential vulnerabilities. It sends the raw HTTP request to an AI model via the GroqCloud API, which then performs a thorough security analysis.\n\nFor each request you will find output in Findings tab.\nIf a request is out of scope, it will be flagged with RED color and analysis will not be performed.\n\n\n## Setup Steps\n\n- Get a GroqCloud API Key:\n    - Sign up for a GroqCloud account at GroqCloud’s website to obtain an API key. This key is required to connect to the AI model.\n\n- Configure Environment Variables in Caido:\n    - Set the following variables in Caido’s settings to link the workflow to GroqCloud:\n        - GroqCloud_API_key: Enter your GroqCloud API key here.\n        - GroqCloud_model_for_AI_Mentor: Specify the AI model you want to use (e.g., a model suited for security analysis or natural language tasks). Check GroqCloud’s documentation for available models and pick one that fits your needs.\n\nRun the Workflow:\nSelect an HTTP request in Caido and trigger the workflow. The AI Mentor’s suggestions will appear in Caido’s Findings.\n\n",
  "edition": 2,
  "graph": {
    "edges": [
      {
        "source": {
          "exec_alias": "true",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 2
        }
      },
      {
        "source": {
          "exec_alias": "false",
          "node_id": 3
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 4
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 4
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 0
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 3
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 2
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 5
        }
      },
      {
        "source": {
          "exec_alias": "exec",
          "node_id": 5
        },
        "target": {
          "exec_alias": "exec",
          "node_id": 1
        }
      }
    ],
    "nodes": [
      {
        "alias": "active_start",
        "definition_id": "caido/active-start",
        "display": {
          "x": -90,
          "y": -150
        },
        "id": 0,
        "inputs": [],
        "name": "Active Start",
        "version": "0.1.0"
      },
      {
        "alias": "active_end",
        "definition_id": "caido/active-end",
        "display": {
          "x": 0,
          "y": 300
        },
        "id": 1,
        "inputs": [],
        "name": "Active End",
        "version": "0.1.0"
      },
      {
        "alias": "javascript",
        "definition_id": "caido/http-code-js",
        "display": {
          "x": -100,
          "y": 50
        },
        "id": 2,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$active_start.request",
              "kind": "ref"
            }
          },
          {
            "alias": "response",
            "value": {
              "data": "$active_start.response",
              "kind": "ref"
            }
          },
          {
            "alias": "code",
            "value": {
              "data": "/**\n * @param {HttpInput} input\n * @param {SDK} sdk\n * @returns {MaybePromise<Data | undefined>}\n */\nexport async function run({ request, response }, sdk) {\n  // Log the start of the function\n  sdk.console.log(\"Starting HTTP request vulnerability analysis\");\n\n  // Get environment variables\n  const model = sdk.env.getVar(\"GroqCloud_model_for_AI_Mentor\");\n  const apiKey = sdk.env.getVar(\"GroqCloud_API_key\");\n\n  // Validate environment variables\n  if (!model) {\n    sdk.console.error(\"Error: Missing model environment variable\");\n    return \"Error: Environment variable 'GroqCloud_model_for_AI_Mentor' is not set\";\n  }\n  if (!apiKey) {\n    sdk.console.error(\"Error: Missing API key environment variable\");\n    return \"Error: Environment variable 'GroqCloud_API_key' is not set\";\n  }\n  sdk.console.log(`Using model: ${model}`);\n\n  // Construct the prompt with the raw HTTP request\n  let prompt = `As an experienced bug bounty hunter, your task is to analyze the following HTTP request for any potential security vulnerabilities. Consider all aspects of the request, including headers, payloads, methods, and anything else that stands out. Look for issues like authentication weaknesses, injection possibilities, session management problems, or any other vulnerabilities that could be exploited. Be creative and thorough—don’t limit yourself to specific categories, and include less obvious issues that make sense for this request.\n\nProvide a detailed analysis, breaking down each potential vulnerability with:\n- A clear description of the issue.\n- Why it could be a security risk.\n- Specific tests or checks to verify it.\n\nStructure your response with headings or bullet points for clarity. Here’s the HTTP request to analyze: \\n\\`\\`\\`\\n${request.getRaw().toText()}\\n\\`\\`\\``;\n\n  // Create and configure the RequestSpec for GroqCloud API\n  const spec = new RequestSpec(\"https://api.groq.com/openai/v1/chat/completions\");\n  spec.setMethod(\"POST\");\n  spec.setBody(JSON.stringify({\n    \"model\": model,\n    \"messages\": [{\"role\": \"user\", \"content\": prompt}],\n    \"stream\": false\n  }));\n  spec.setHeader(\"Content-Type\", \"application/json\");\n  spec.setHeader(\"Authorization\", \"Bearer \" + apiKey);\n\n  // Log request details (avoid logging headers to protect API key)\n  sdk.console.log(`Sending request to ${spec.getHost()}${spec.getPath()} with method ${spec.getMethod()}`);\n\n  // Send the request and handle potential network errors\n  try {\n    sdk.console.log(\"Before sending request\");\n    const sentRequest = await sdk.requests.send(spec);\n    \n    if (!sentRequest.response) {\n      sdk.console.error(\"No response received from API\");\n      return \"No response received\";\n    }\n    sdk.console.log(\"Request sent\");\n    const statusCode = sentRequest.response.getCode();\n    sdk.console.log(`Received response with status code ${statusCode}`);\n\n    // Check if the request was successful\n    if (statusCode !== 200) {\n      sdk.console.error(`API request failed with status ${statusCode}`);\n      return `Error: Received status code ${statusCode}`;\n    }\n\n    const responseBody = sentRequest.response.getBody();\n    if (!responseBody) {\n      sdk.console.error(\"Response body is empty\");\n      return \"No response body\";\n    }\n\n    // Parse and process the response\n    try {\n      const responseAsJson = responseBody.toJson();\n      sdk.console.log(\"Response JSON keys: \" + Object.keys(responseAsJson).join(\", \"));\n\n      // Validate response structure\n      if (!responseAsJson.choices || !Array.isArray(responseAsJson.choices) || responseAsJson.choices.length === 0) {\n        sdk.console.error(\"Invalid response format from API\");\n        return \"Error: Invalid response format\";\n      }\n\n      const cleanResponse = responseAsJson.choices[0].message.content;\n      sdk.console.log(\"Successfully extracted analysis from response\");\n      return cleanResponse;\n    } catch (e) {\n      sdk.console.error(`Error parsing JSON response: ${e.message}`);\n      return `Error parsing JSON response: ${e.message}`;\n    }\n  } catch (e) {\n    sdk.console.error(`Error sending request to API: ${e.message}`);\n    return `Error sending request: ${e.message}`;\n  }\n}\n",
              "kind": "string"
            }
          }
        ],
        "name": "Javascript",
        "version": "0.1.0"
      },
      {
        "alias": "in_scope",
        "definition_id": "caido/in-scope",
        "display": {
          "x": 30,
          "y": -40
        },
        "id": 3,
        "inputs": [
          {
            "alias": "request",
            "value": {
              "data": "$active_start.request",
              "kind": "ref"
            }
          }
        ],
        "name": "In Scope",
        "version": "0.1.0"
      },
      {
        "alias": "set_color",
        "definition_id": "caido/color-set",
        "display": {
          "x": 70,
          "y": 90
        },
        "id": 4,
        "inputs": [
          {
            "alias": "color",
            "value": {
              "data": "#ff0000",
              "kind": "string"
            }
          },
          {
            "alias": "request",
            "value": {
              "data": "$active_start.request",
              "kind": "ref"
            }
          }
        ],
        "name": "Set Color",
        "version": "0.1.0"
      },
      {
        "alias": "create_finding",
        "definition_id": "caido/finding-create",
        "display": {
          "x": -100,
          "y": 180
        },
        "id": 5,
        "inputs": [
          {
            "alias": "description",
            "value": {
              "data": "$javascript.data",
              "kind": "ref"
            }
          },
          {
            "alias": "reporter",
            "value": {
              "data": "AI Mentor (GroqCloud)",
              "kind": "string"
            }
          },
          {
            "alias": "request",
            "value": {
              "data": "$active_start.request",
              "kind": "ref"
            }
          },
          {
            "alias": "title",
            "value": {
              "data": "AI Mentor suggestion",
              "kind": "string"
            }
          }
        ],
        "name": "Create Finding",
        "version": "0.1.0"
      }
    ]
  },
  "id": "fd8c92d6-860d-4470-889d-3626effc472b",
  "kind": "active",
  "name": "AI Mentor (GroqCloud)"
}
